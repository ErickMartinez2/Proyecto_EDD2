/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto_edd2;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Erick Martinez, Juan Guevara and Iliana Pinto
 */
public class Principal extends javax.swing.JFrame {

    //Variables
    ArrayList<Campo> campos = new ArrayList();
    File file;
    boolean tipo_archivo;

    public Principal() {
        initComponents();
        this.setLocationRelativeTo(this);
        Crear_Fij.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        Crear_Var.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Crear_Fij = new javax.swing.JDialog();
        jp_fija = new javax.swing.JPanel();
        rb_string = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        tf_nombre = new javax.swing.JTextField();
        js_longitud = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        rb_char = new javax.swing.JRadioButton();
        rb_int = new javax.swing.JRadioButton();
        rb_double = new javax.swing.JRadioButton();
        rb_float = new javax.swing.JRadioButton();
        rb_long = new javax.swing.JRadioButton();
        jb_agregar_fij = new javax.swing.JButton();
        rb_short = new javax.swing.JRadioButton();
        jb_salir_fij = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        Crear_Var = new javax.swing.JDialog();
        jPanel8 = new javax.swing.JPanel();
        rb_string1 = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        tf_nombre1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        rb_char1 = new javax.swing.JRadioButton();
        rb_int1 = new javax.swing.JRadioButton();
        rb_double1 = new javax.swing.JRadioButton();
        rb_float1 = new javax.swing.JRadioButton();
        rb_long1 = new javax.swing.JRadioButton();
        jb_agregar_var = new javax.swing.JButton();
        rb_short1 = new javax.swing.JRadioButton();
        jb_salir_var = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        dato = new javax.swing.ButtonGroup();
        dato2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jl_archivoactual = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jt_Campo = new javax.swing.JTable();
        jb_cargartabla = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jm_archivo = new javax.swing.JMenu();
        jmi_crear = new javax.swing.JMenuItem();
        jmi_abrir = new javax.swing.JMenuItem();
        jm_campo = new javax.swing.JMenu();
        jmi_crear1 = new javax.swing.JMenuItem();
        jmi_modificar1 = new javax.swing.JMenuItem();
        jmi_borrar1 = new javax.swing.JMenuItem();
        jm_registro = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jmi_introducir2 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jm_indice = new javax.swing.JMenu();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jm_estandarizacion = new javax.swing.JMenu();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();

        jp_fija.setBackground(new java.awt.Color(0, 153, 153));

        rb_string.setBackground(new java.awt.Color(0, 153, 153));
        dato.add(rb_string);
        rb_string.setForeground(new java.awt.Color(255, 255, 255));
        rb_string.setSelected(true);
        rb_string.setText("String");
        rb_string.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rb_stringMouseClicked(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Nombre del Campo:");

        js_longitud.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Longitud:");

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Tipo de Dato:");

        rb_char.setBackground(new java.awt.Color(0, 153, 153));
        dato.add(rb_char);
        rb_char.setForeground(new java.awt.Color(255, 255, 255));
        rb_char.setText("Char");
        rb_char.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rb_charMouseClicked(evt);
            }
        });

        rb_int.setBackground(new java.awt.Color(0, 153, 153));
        dato.add(rb_int);
        rb_int.setForeground(new java.awt.Color(255, 255, 255));
        rb_int.setText("Int");
        rb_int.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rb_intMouseClicked(evt);
            }
        });

        rb_double.setBackground(new java.awt.Color(0, 153, 153));
        dato.add(rb_double);
        rb_double.setForeground(new java.awt.Color(255, 255, 255));
        rb_double.setText("Double");
        rb_double.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rb_doubleMouseClicked(evt);
            }
        });

        rb_float.setBackground(new java.awt.Color(0, 153, 153));
        dato.add(rb_float);
        rb_float.setForeground(new java.awt.Color(255, 255, 255));
        rb_float.setText("Float");
        rb_float.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rb_floatMouseClicked(evt);
            }
        });

        rb_long.setBackground(new java.awt.Color(0, 153, 153));
        dato.add(rb_long);
        rb_long.setForeground(new java.awt.Color(255, 255, 255));
        rb_long.setText("Long");
        rb_long.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rb_longMouseClicked(evt);
            }
        });

        jb_agregar_fij.setBackground(new java.awt.Color(0, 153, 153));
        jb_agregar_fij.setText("Agregar");
        jb_agregar_fij.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_agregar_fijMouseClicked(evt);
            }
        });

        rb_short.setBackground(new java.awt.Color(0, 153, 153));
        dato.add(rb_short);
        rb_short.setForeground(new java.awt.Color(255, 255, 255));
        rb_short.setText("Short");
        rb_short.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rb_shortMouseClicked(evt);
            }
        });

        jb_salir_fij.setBackground(new java.awt.Color(0, 153, 153));
        jb_salir_fij.setText("Salir");
        jb_salir_fij.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_salir_fijMouseClicked(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Corbel", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Campo de Longitud Fija");

        javax.swing.GroupLayout jp_fijaLayout = new javax.swing.GroupLayout(jp_fija);
        jp_fija.setLayout(jp_fijaLayout);
        jp_fijaLayout.setHorizontalGroup(
            jp_fijaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_fijaLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jp_fijaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jp_fijaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tf_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(js_longitud, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jp_fijaLayout.createSequentialGroup()
                        .addGroup(jp_fijaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rb_char)
                            .addComponent(rb_string))
                        .addGap(18, 18, 18)
                        .addGroup(jp_fijaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rb_double)
                            .addComponent(rb_float))
                        .addGap(18, 18, 18)
                        .addGroup(jp_fijaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rb_long)
                            .addGroup(jp_fijaLayout.createSequentialGroup()
                                .addComponent(rb_int)
                                .addGap(18, 18, 18)
                                .addComponent(rb_short))))
                    .addGroup(jp_fijaLayout.createSequentialGroup()
                        .addComponent(jb_agregar_fij)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jb_salir_fij)))
                .addContainerGap(22, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jp_fijaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jp_fijaLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jb_agregar_fij, jb_salir_fij});

        jp_fijaLayout.setVerticalGroup(
            jp_fijaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jp_fijaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jp_fijaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tf_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jp_fijaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(js_longitud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jp_fijaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(jp_fijaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rb_string)
                        .addComponent(rb_double)
                        .addComponent(rb_int)
                        .addComponent(rb_short)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jp_fijaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jp_fijaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rb_float)
                        .addComponent(rb_long))
                    .addComponent(rb_char))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jp_fijaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_agregar_fij)
                    .addComponent(jb_salir_fij))
                .addContainerGap())
        );

        javax.swing.GroupLayout Crear_FijLayout = new javax.swing.GroupLayout(Crear_Fij.getContentPane());
        Crear_Fij.getContentPane().setLayout(Crear_FijLayout);
        Crear_FijLayout.setHorizontalGroup(
            Crear_FijLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jp_fija, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        Crear_FijLayout.setVerticalGroup(
            Crear_FijLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jp_fija, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel8.setBackground(new java.awt.Color(0, 153, 153));

        rb_string1.setBackground(new java.awt.Color(0, 153, 153));
        dato2.add(rb_string1);
        rb_string1.setForeground(new java.awt.Color(255, 255, 255));
        rb_string1.setSelected(true);
        rb_string1.setText("String");

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Nombre del Campo:");

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Tipo de Dato:");

        rb_char1.setBackground(new java.awt.Color(0, 153, 153));
        dato2.add(rb_char1);
        rb_char1.setForeground(new java.awt.Color(255, 255, 255));
        rb_char1.setText("Char");

        rb_int1.setBackground(new java.awt.Color(0, 153, 153));
        dato2.add(rb_int1);
        rb_int1.setForeground(new java.awt.Color(255, 255, 255));
        rb_int1.setText("Int");

        rb_double1.setBackground(new java.awt.Color(0, 153, 153));
        dato2.add(rb_double1);
        rb_double1.setForeground(new java.awt.Color(255, 255, 255));
        rb_double1.setText("Double");

        rb_float1.setBackground(new java.awt.Color(0, 153, 153));
        dato2.add(rb_float1);
        rb_float1.setForeground(new java.awt.Color(255, 255, 255));
        rb_float1.setText("Float");

        rb_long1.setBackground(new java.awt.Color(0, 153, 153));
        dato2.add(rb_long1);
        rb_long1.setForeground(new java.awt.Color(255, 255, 255));
        rb_long1.setText("Long");

        jb_agregar_var.setBackground(new java.awt.Color(0, 153, 153));
        jb_agregar_var.setText("Agregar");
        jb_agregar_var.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_agregar_varMouseClicked(evt);
            }
        });

        rb_short1.setBackground(new java.awt.Color(0, 153, 153));
        dato2.add(rb_short1);
        rb_short1.setForeground(new java.awt.Color(255, 255, 255));
        rb_short1.setText("Short");

        jb_salir_var.setBackground(new java.awt.Color(0, 153, 153));
        jb_salir_var.setText("Salir");
        jb_salir_var.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_salir_varMouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Corbel", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Campo de Longitud Variable");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rb_char1)
                                    .addComponent(rb_string1))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(rb_double1))
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addComponent(rb_float1)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addComponent(tf_nombre1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(rb_short1)
                                .addGap(10, 10, 10)
                                .addComponent(rb_int1))
                            .addComponent(rb_long1)))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jb_agregar_var)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jb_salir_var)))
                .addContainerGap(64, Short.MAX_VALUE))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel8Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jb_agregar_var, jb_salir_var});

        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tf_nombre1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rb_string1)
                        .addComponent(rb_double1)
                        .addComponent(rb_short1)
                        .addComponent(rb_int1)))
                .addGap(8, 8, 8)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rb_char1)
                    .addComponent(rb_float1)
                    .addComponent(rb_long1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_salir_var)
                    .addComponent(jb_agregar_var))
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout Crear_VarLayout = new javax.swing.GroupLayout(Crear_Var.getContentPane());
        Crear_Var.getContentPane().setLayout(Crear_VarLayout);
        Crear_VarLayout.setHorizontalGroup(
            Crear_VarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        Crear_VarLayout.setVerticalGroup(
            Crear_VarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));
        jPanel1.setForeground(new java.awt.Color(0, 102, 102));

        jLabel9.setFont(new java.awt.Font("Corbel", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Proyecto EDD2");

        jLabel10.setFont(new java.awt.Font("Berlin Sans FB Demi", 2, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Archivo Actual:");

        jl_archivoactual.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jl_archivoactual.setForeground(new java.awt.Color(255, 255, 255));

        jt_Campo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Campos", "Nombre", "Tipo", "Longitud", "Llave Principal"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jt_Campo.setToolTipText("");
        jScrollPane2.setViewportView(jt_Campo);

        jb_cargartabla.setText("Cargar Tabla");
        jb_cargartabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_cargartablaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 864, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(8, 8, 8)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jl_archivoactual, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(174, 174, 174)
                .addComponent(jb_cargartabla)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jl_archivoactual, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jb_cargartabla)
                .addContainerGap(178, Short.MAX_VALUE))
        );

        jm_archivo.setText("Archivo");

        jmi_crear.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jmi_crear.setText("Crear");
        jmi_crear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_crearActionPerformed(evt);
            }
        });
        jm_archivo.add(jmi_crear);

        jmi_abrir.setText("Abrir");
        jmi_abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_abrirActionPerformed(evt);
            }
        });
        jm_archivo.add(jmi_abrir);

        jMenuBar1.add(jm_archivo);

        jm_campo.setText("Campo");
        jm_campo.setEnabled(false);

        jmi_crear1.setText("Crear");
        jmi_crear1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_crear1ActionPerformed(evt);
            }
        });
        jm_campo.add(jmi_crear1);

        jmi_modificar1.setText("Modificar");
        jmi_modificar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_modificar1ActionPerformed(evt);
            }
        });
        jm_campo.add(jmi_modificar1);

        jmi_borrar1.setText("Borrar");
        jmi_borrar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_borrar1ActionPerformed(evt);
            }
        });
        jm_campo.add(jmi_borrar1);

        jMenuBar1.add(jm_campo);

        jm_registro.setText("Registro");
        jm_registro.setEnabled(false);

        jMenuItem7.setText("Cargar ");
        jm_registro.add(jMenuItem7);

        jmi_introducir2.setText("Introducir");
        jmi_introducir2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_introducir2ActionPerformed(evt);
            }
        });
        jm_registro.add(jmi_introducir2);

        jMenuItem9.setText("Modificar ");
        jm_registro.add(jMenuItem9);

        jMenuItem10.setText("Buscar");
        jm_registro.add(jMenuItem10);

        jMenuItem11.setText("Borrar ");
        jm_registro.add(jMenuItem11);

        jMenuItem12.setText("Listar");
        jm_registro.add(jMenuItem12);

        jMenuItem1.setText("Cruzar Archivos");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jm_registro.add(jMenuItem1);

        jMenuBar1.add(jm_registro);

        jm_indice.setText("Indice");
        jm_indice.setEnabled(false);

        jMenuItem13.setText("Crear");
        jm_indice.add(jMenuItem13);

        jMenuItem14.setText("Re_Indexar");
        jm_indice.add(jMenuItem14);

        jMenuBar1.add(jm_indice);

        jm_estandarizacion.setText("Estandarización");
        jm_estandarizacion.setEnabled(false);

        jMenuItem15.setText("Exportar Excel");
        jm_estandarizacion.add(jMenuItem15);

        jMenuItem16.setText("Exportar XML con Schema");
        jm_estandarizacion.add(jMenuItem16);

        jMenuBar1.add(jm_estandarizacion);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rb_charMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rb_charMouseClicked
        js_longitud.setValue(1);
        js_longitud.setEnabled(false);
    }//GEN-LAST:event_rb_charMouseClicked

    private void rb_stringMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rb_stringMouseClicked
        js_longitud.setEnabled(true);
    }//GEN-LAST:event_rb_stringMouseClicked

    private void rb_doubleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rb_doubleMouseClicked
        js_longitud.setEnabled(true);
    }//GEN-LAST:event_rb_doubleMouseClicked

    private void rb_floatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rb_floatMouseClicked
        js_longitud.setEnabled(true);
    }//GEN-LAST:event_rb_floatMouseClicked

    private void rb_intMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rb_intMouseClicked
        js_longitud.setEnabled(true);
    }//GEN-LAST:event_rb_intMouseClicked

    private void rb_longMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rb_longMouseClicked
        js_longitud.setEnabled(true);
    }//GEN-LAST:event_rb_longMouseClicked

    private void rb_shortMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rb_shortMouseClicked
        js_longitud.setEnabled(true);
    }//GEN-LAST:event_rb_shortMouseClicked

    private void jb_agregar_fijMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_agregar_fijMouseClicked
        try {
            String nombre = tf_nombre.getText();
            String tipo;
            if (rb_string.isSelected()) {
                tipo = "String";
            } else if (rb_int.isSelected()) {
                tipo = "Int";
            } else if (rb_long.isSelected()) {
                tipo = "Long";
            } else if (rb_char.isSelected()) {
                tipo = "Char";
            } else if (rb_double.isSelected()) {
                tipo = "Double";
            } else if (rb_short.isSelected()) {
                tipo = "Short";
            } else {
                tipo = "Float";
            }
            int longitud = (int) js_longitud.getValue();
            boolean entrar = true;
            for (int i = 0; i < campos.size(); i++) {
                if (campos.get(i).isLlave()) {
                    entrar = false;
                }
            }
            boolean llave = false;
            if (entrar) {
                int respuesta = JOptionPane.showConfirmDialog(Crear_Fij, "¿Desea que el campo " + nombre + " sea la llave principal?");
                if (respuesta == 0) {
                    llave = true;
                }
            }
            Campo campo = new Campo(nombre, tipo, longitud, llave);
            campos.add(campo);
            JOptionPane.showMessageDialog(Crear_Fij, "¡Campo " + nombre + " agregado exitosamente!");
            tf_nombre.setText("");
            js_longitud.setValue(1);
            rb_string.setSelected(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(Crear_Fij, "¡Error!");
        }
    }//GEN-LAST:event_jb_agregar_fijMouseClicked

    private void jb_salir_fijMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_salir_fijMouseClicked
        if (!campos.isEmpty()) {
            boolean llave_principal = false;
            for (int i = 0; i < campos.size(); i++) {
                if (campos.get(i).isLlave()) {
                    llave_principal = true;
                }
            }
            if (!llave_principal) {
                String opciones = "-> Campos del Archivo \n";
                for (int i = 0; i < campos.size(); i++) {
                    opciones += (i + 1) + ". " + campos.get(i).getNombre() + "\n";
                }
                opciones += "Seleccione la llave principal: ";
                boolean seguir;
                int opcion = 0;
                do {
                    seguir = true;
                    try {
                        opcion = Integer.parseInt(JOptionPane.showInputDialog(this, opciones));
                    } catch (Exception e) {
                        seguir = false;
                        JOptionPane.showMessageDialog(Crear_Fij, "¡Datos incorrectos!");
                    }
                    if (seguir) {
                        if (opcion <= 0 || opcion > campos.size()) {
                            seguir = false;
                            JOptionPane.showMessageDialog(Crear_Fij, "¡Numero incorrecto!");
                        }
                    }
                } while (!seguir);
                campos.get(opcion - 1).setLlave(true);
            }
            File archivo;
            FileWriter fw = null;
            BufferedWriter bw = null;
            try {
                archivo = file;
                fw = new FileWriter(archivo, false);
                bw = new BufferedWriter(fw);
                bw.write("0;");
                for (int i = 0; i < campos.size(); i++) {
                    bw.write(campos.get(i).toString());
                }
                bw.write("&;-1&;");
                bw.flush();
            } catch (Exception e) {
                // e.printStackTrace();
            }
            try {
                bw.close();
                fw.close();
            } catch (IOException ex) {
            }
            //JOptionPane.showMessageDialog(Crear_Fij, "¡Archivo " + file.getName() + " agregado exitosamente!");
        }
        Crear_Fij.dispose();
    }//GEN-LAST:event_jb_salir_fijMouseClicked

    private void jb_agregar_varMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_agregar_varMouseClicked
        try {
            String nombre = tf_nombre1.getText();
            String tipo;
            if (rb_string1.isSelected()) {
                tipo = "String";
            } else if (rb_int1.isSelected()) {
                tipo = "Int";
            } else if (rb_long1.isSelected()) {
                tipo = "Long";
            } else if (rb_char1.isSelected()) {
                tipo = "Char";
            } else if (rb_double1.isSelected()) {
                tipo = "Double";
            } else if (rb_short1.isSelected()) {
                tipo = "Short";
            } else {
                tipo = "Float";
            }
            boolean entrar = true;
            for (int i = 0; i < campos.size(); i++) {
                if (campos.get(i).isLlave()) {
                    entrar = false;
                }
            }
            boolean llave = false;
            if (entrar) {
                int respuesta = JOptionPane.showConfirmDialog(Crear_Var, "¿Desea que el campo " + nombre + " sea la llave principal?");
                if (respuesta == 0) {
                    llave = true;
                }
            }
            Campo campo = new Campo(nombre, tipo, 0, llave);
            campos.add(campo);
            JOptionPane.showMessageDialog(Crear_Var, "¡Campo " + nombre + " agregado exitosamente!");
            tf_nombre1.setText("");
            rb_string1.setSelected(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(Crear_Var, "¡Error!");
        }
    }//GEN-LAST:event_jb_agregar_varMouseClicked

    private void jb_salir_varMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_salir_varMouseClicked
        if (!campos.isEmpty()) {
            boolean llave_principal = false;
            for (int i = 0; i < campos.size(); i++) {
                if (campos.get(i).isLlave()) {
                    llave_principal = true;
                }
            }
            if (!llave_principal) {
                String opciones = "-> Campos del Archivo \n";
                for (int i = 0; i < campos.size(); i++) {
                    opciones += (i + 1) + ". " + campos.get(i).getNombre() + "\n";
                }
                opciones += "Seleccione la llave principal: ";
                boolean seguir;
                int opcion = 0;
                do {
                    seguir = true;
                    try {
                        opcion = Integer.parseInt(JOptionPane.showInputDialog(this, opciones));
                    } catch (Exception e) {
                        seguir = false;
                        JOptionPane.showMessageDialog(Crear_Var, "¡Datos incorrectos!");
                    }
                    if (seguir) {
                        if (opcion <= 0 || opcion > campos.size()) {
                            seguir = false;
                            JOptionPane.showMessageDialog(Crear_Var, "¡Numero incorrecto!");
                        }
                    }
                } while (!seguir);
                campos.get(opcion - 1).setLlave(true);
            }
            File archivo;
            FileWriter fw = null;
            BufferedWriter bw = null;
            try {
                archivo = file;
                fw = new FileWriter(archivo, false);
                bw = new BufferedWriter(fw);
                bw.write("1;");
                for (int i = 0; i < campos.size(); i++) {
                    bw.write(campos.get(i).toString2());
                }
                bw.write("&;-1&;");
                bw.flush();
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                bw.close();
                fw.close();
            } catch (IOException ex) {
            }
            //JOptionPane.showMessageDialog(Crear_Var, "¡Archivo " + file.getName() + " agregado exitosamente!");
        }
        Crear_Var.dispose();
    }//GEN-LAST:event_jb_salir_varMouseClicked

    private void jmi_crearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_crearActionPerformed
        String nombre = JOptionPane.showInputDialog(this, "Ingrese el nombre del nuevo archivo: ");
        campos = new ArrayList();
        if (nombre != null && !"".equals(nombre)) {
            file = new File("./" + nombre + ".txt");
            int num = JOptionPane.showConfirmDialog(this, "¿Desea sus campos de longitud variable?");
            if (num == 0) {
                Crear_Var.setModal(true);
                Crear_Var.pack();
                Crear_Var.setLocationRelativeTo(this);
                Crear_Var.setVisible(true);
            } else if (num == 1) {
                Crear_Fij.setModal(true);
                Crear_Fij.pack();
                Crear_Fij.setLocationRelativeTo(this);
                Crear_Fij.setVisible(true);
            }
        }
    }//GEN-LAST:event_jmi_crearActionPerformed

    private void jmi_abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_abrirActionPerformed
        try {
            String archivo = JOptionPane.showInputDialog(this, "Ingrese el nombre del archivo: ");
            File archivo1 = new File("./" + archivo + ".txt");
            if (archivo1.exists()) {
                file = archivo1;
                Scanner sc;
                campos = new ArrayList();
                try {
                    sc = new Scanner(file);
                    sc.useDelimiter(";");
                    Campo campo;
                    tipo_archivo = sc.next().equals("0");
                    if (tipo_archivo) {
                        while (sc.hasNext()) {
                            String nombre = sc.next();
                            if (!nombre.equals("&")) {
                                campo = new Campo(nombre, sc.next(), sc.nextInt(), sc.nextInt() != 0);
                                campos.add(campo);
                            } else {
                                break;
                            }
                        }
                    } else {
                        while (sc.hasNext()) {
                            String nombre = sc.next();
                            if (!nombre.equals("&")) {
                                campo = new Campo(nombre, sc.next(), 0, sc.nextInt() != 0);
                                campos.add(campo);
                            } else {
                                break;
                            }
                        }
                    }

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "¡Error!");
                }
                jl_archivoactual.setText(archivo + ".txt");
                DefaultTableModel modelo = (DefaultTableModel) jt_Campo.getModel();
                modelo.setRowCount(0);
                int cont = 0;
                for (int i = 0; i < campos.size(); i++) {
                    cont++;
                    String bool;
                    if (campos.get(i).isLlave()) {
                        bool = "Verdadero";
                    } else {
                        bool = "Falso";
                    }
                    Object[] row = {"Campo #" + cont, campos.get(i).getNombre(), campos.get(i).getTipo(), campos.get(i).getLongitud(), bool};
                    modelo.addRow(row);
                }
                jm_campo.setEnabled(true);
                jm_registro.setEnabled(true);
                jm_indice.setEnabled(true);
                jm_estandarizacion.setEnabled(true);
                JOptionPane.showMessageDialog(this, "¡Archivo " + file.getName() + " cargado exitosamente!");
            } else {
                JOptionPane.showMessageDialog(this, "¡El archivo solicitado no existe!");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "¡Error!");
        }
    }//GEN-LAST:event_jmi_abrirActionPerformed

    private void jmi_crear1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_crear1ActionPerformed
        try {
            Scanner sc = new Scanner(file);
            sc.useDelimiter("&");
            sc.next();
            sc.next();
            sc.useDelimiter(";");
            sc.next();
            if (!sc.hasNext()) {
                if (!tipo_archivo) {
                    Crear_Var.setModal(true);
                    Crear_Var.pack();
                    Crear_Var.setLocationRelativeTo(this);
                    Crear_Var.setVisible(true);
                } else {
                    Crear_Fij.setModal(true);
                    Crear_Fij.pack();
                    Crear_Fij.setLocationRelativeTo(this);
                    Crear_Fij.setVisible(true);
                }
            } else {
                JOptionPane.showMessageDialog(this, "¡El archivo ya contiene registros, no es posible agregar campos!");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "¡Error!");
        }
    }//GEN-LAST:event_jmi_crear1ActionPerformed

    private void jb_cargartablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_cargartablaMouseClicked
        DefaultTableModel modelo = (DefaultTableModel) jt_Campo.getModel();
        modelo.setRowCount(0);
        System.out.println(campos);
        int cont = 0;
        for (int i = 0; i < campos.size(); i++) {
            cont++;
            String bool;
            if (campos.get(i).isLlave()) {
                bool = "Verdadero";
            } else {
                bool = "Falso";
            }
            Object[] row = {"Campo #" + cont, campos.get(i).getNombre(), campos.get(i).getTipo(), campos.get(i).getLongitud(), bool};
            modelo.addRow(row);
        }
    }//GEN-LAST:event_jb_cargartablaMouseClicked

    private void jmi_borrar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_borrar1ActionPerformed
        try {
            Scanner sc = new Scanner(file);
            sc.useDelimiter("&");
            sc.next();
            sc.next();
            sc.useDelimiter(";");
            sc.next();
            if (!sc.hasNext()) {
                int numero = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese el numero del campo que desea eliminar: "));
                int numero_lista = numero - 1;
                if (numero_lista >= 0 && numero_lista < campos.size()) {
                    if (!campos.get(numero_lista).isLlave()) {
                        String nombre = campos.get(numero_lista).getNombre();
                        campos.remove(numero_lista);
                        File archivo;
                        FileWriter fw = null;
                        BufferedWriter bw = null;
                        try {
                            archivo = file;
                            fw = new FileWriter(archivo, false);
                            bw = new BufferedWriter(fw);
                            if (tipo_archivo) {
                                bw.write("0;");
                                for (int i = 0; i < campos.size(); i++) {
                                    bw.write(campos.get(i).toString());
                                }
                                bw.write("&;-1&;");
                                bw.flush();
                            } else {
                                bw.write("1;");
                                for (int i = 0; i < campos.size(); i++) {
                                    bw.write(campos.get(i).toString2());
                                }
                                bw.write("&;-1&;");
                                bw.flush();
                            }
                            bw.close();
                            fw.close();
                        } catch (Exception e) {
                            //e.printStackTrace();
                        }
                        try {
                            bw.close();
                            fw.close();
                        } catch (IOException ex) {
                        }
                        JOptionPane.showMessageDialog(this, "¡Campo " + nombre + " eliminado exitosamente!");
                    } else {
                        JOptionPane.showMessageDialog(this, "¡No se puede eliminar un campo que es llave principal!");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "¡El campo no existe!");
                }
            } else {
                JOptionPane.showMessageDialog(this, "¡El archivo ya contiene registros, no es posible eliminar campos!");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "¡Error!");
        }
    }//GEN-LAST:event_jmi_borrar1ActionPerformed

    private void jmi_modificar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_modificar1ActionPerformed
        try {
            Scanner sc = new Scanner(file);
            sc.useDelimiter("&");
            sc.next();
            sc.next();
            sc.useDelimiter(";");
            sc.next();
            if (!sc.hasNext()) {
                int numero = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese el numero del campo que desea modificar: "));
                int numero_lista = numero - 1;
                if (numero_lista >= 0 && numero_lista < campos.size()) {
                    if (!campos.get(numero_lista).isLlave()) {
                        if (tipo_archivo) {
                            boolean salir;
                            String respuesta;
                            do {
                                salir = false;
                                respuesta = JOptionPane.showInputDialog(this, "-> Caracteristicas del Campo " + campos.get(numero_lista).getNombre() + "\n"
                                        + "1. Nombre \n"
                                        + "2. Tipo \n"
                                        + "3. Longitud \n"
                                        + "Ingrese el numero de su opción: ");
                                if (respuesta.equals("1") || respuesta.equals("2") || respuesta.equals("3")) {
                                    salir = true;
                                }
                            } while (!salir);
                            switch (respuesta) {
                                case "1":
                                    String nombre = JOptionPane.showInputDialog(this, "Ingrese el nuevo nombre del campo " + campos.get(numero_lista).getNombre());
                                    campos.get(numero_lista).setNombre(nombre);
                                    break;
                                case "2":
                                    boolean salir2;
                                    String respuesta2;
                                    do {
                                        salir2 = false;
                                        respuesta2 = JOptionPane.showInputDialog(this, "-> Tipos del Campo \n"
                                                + "1. String \n"
                                                + "2. Double \n"
                                                + "3. Int \n"
                                                + "4. Short \n"
                                                + "5. Char \n"
                                                + "6. Float \n"
                                                + "7. Long \n"
                                                + "Ingrese el numero de su opción: ");
                                        if (respuesta2.equals("1") || respuesta2.equals("2") || respuesta2.equals("3") || respuesta2.equals("4") || respuesta2.equals("5") || respuesta2.equals("6") || respuesta2.equals("7")) {
                                            salir2 = true;
                                        }
                                    } while (!salir2);
                                    String tipo = "";
                                    switch (respuesta2) {
                                        case "1":
                                            tipo = "String";
                                            break;
                                        case "2":
                                            tipo = "Double";
                                            break;
                                        case "3":
                                            tipo = "Int";
                                            break;
                                        case "4":
                                            tipo = "Short";
                                            break;
                                        case "5":
                                            tipo = "Char";
                                            break;
                                        case "6":
                                            tipo = "Float";
                                            break;
                                        case "7":
                                            tipo = "Long";
                                            break;
                                    }
                                    campos.get(numero_lista).setTipo(tipo);
                                    break;
                                case "3":
                                    int longitud = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese la nueva edad del campo " + campos.get(numero_lista).getNombre()));
                                    campos.get(numero_lista).setLongitud(longitud);
                                    break;
                            }
                            File archivo;
                            FileWriter fw = null;
                            BufferedWriter bw = null;
                            try {
                                archivo = file;
                                fw = new FileWriter(archivo, false);
                                bw = new BufferedWriter(fw);
                                if (tipo_archivo) {
                                    bw.write("0;");
                                    for (int i = 0; i < campos.size(); i++) {
                                        bw.write(campos.get(i).toString());
                                    }
                                    bw.write("&;-1&;");
                                    bw.flush();
                                } else {
                                    bw.write("1;");
                                    for (int i = 0; i < campos.size(); i++) {
                                        bw.write(campos.get(i).toString2());
                                    }
                                    bw.write("&;-1&;");
                                    bw.flush();
                                }
                                bw.close();
                                fw.close();
                            } catch (Exception e) {
                                //e.printStackTrace();
                            }
                            try {
                                bw.close();
                                fw.close();
                            } catch (IOException ex) {
                            }
                        } else {
                            boolean salir;
                            String respuesta;
                            do {
                                salir = false;
                                respuesta = JOptionPane.showInputDialog(this, "-> Caracteristicas del Campo " + campos.get(numero_lista).getNombre() + "\n"
                                        + "1. Nombre \n"
                                        + "2. Tipo \n"
                                        + "Ingrese el numero de su opción: ");
                                if (respuesta.equals("1") || respuesta.equals("2")) {
                                    salir = true;
                                }
                            } while (!salir);
                            switch (respuesta) {
                                case "1":
                                    String nombre = JOptionPane.showInputDialog(this, "Ingrese el nuevo nombre del campo " + campos.get(numero_lista).getNombre());
                                    campos.get(numero_lista).setNombre(nombre);
                                    break;
                                case "2":
                                    boolean salir2;
                                    String respuesta2;
                                    do {
                                        salir2 = false;
                                        respuesta2 = JOptionPane.showInputDialog(this, "-> Tipos del Campo\n "
                                                + "1. String \n"
                                                + "2. Double \n"
                                                + "3. Int \n"
                                                + "4. Short \n"
                                                + "5. Char \n"
                                                + "6. Float \n"
                                                + "7. Long \n"
                                                + "Ingrese el numero de su opción: ");
                                        if (respuesta2.equals("1") || respuesta2.equals("2") || respuesta2.equals("3") || respuesta2.equals("4") || respuesta2.equals("5") || respuesta2.equals("6") || respuesta2.equals("7")) {
                                            salir2 = true;
                                        }
                                    } while (!salir2);
                                    String tipo = "";
                                    switch (respuesta2) {
                                        case "1":
                                            tipo = "String";
                                            break;
                                        case "2":
                                            tipo = "Double";
                                            break;
                                        case "3":
                                            tipo = "Int";
                                            break;
                                        case "4":
                                            tipo = "Short";
                                            break;
                                        case "5":
                                            tipo = "Char";
                                            break;
                                        case "6":
                                            tipo = "Float";
                                            break;
                                        case "7":
                                            tipo = "Long";
                                            break;
                                    }
                                    campos.get(numero_lista).setTipo(tipo);
                                    break;
                            }
                            File archivo;
                            FileWriter fw = null;
                            BufferedWriter bw = null;
                            try {
                                archivo = file;
                                fw = new FileWriter(archivo, false);
                                bw = new BufferedWriter(fw);
                                if (tipo_archivo) {
                                    bw.write("0;");
                                    for (int i = 0; i < campos.size(); i++) {
                                        bw.write(campos.get(i).toString());
                                    }
                                    bw.write("&;-1&;");
                                    bw.flush();
                                } else {
                                    bw.write("1;");
                                    for (int i = 0; i < campos.size(); i++) {
                                        bw.write(campos.get(i).toString2());
                                    }
                                    bw.write("&;-1&;");
                                    bw.flush();
                                }
                                bw.close();
                                fw.close();
                            } catch (Exception e) {
                                //e.printStackTrace();
                            }
                            try {
                                bw.close();
                                fw.close();
                            } catch (IOException ex) {
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "¡No se puede modificar un campo que es llave principal!");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "¡El campo no existe!");
                }
            } else {
                JOptionPane.showMessageDialog(this, "¡El campo no existe!");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "¡Error!");
        }
    }//GEN-LAST:event_jmi_modificar1ActionPerformed

    private void jmi_introducir2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_introducir2ActionPerformed
        //String opcion = JOptionPane.showConfirmDialog(this, "Si le da aceptar no podra realizar ninguna operacion para los campos") + "";
        //if (opcion.equals("0")) {
            jm_campo.setEnabled(false);
            try {
                if (tipo_archivo) {//longitud fija
                    String buffer = "";
                    for (int i = 0; i < campos.size(); i++) {
                        boolean salir;
                        do {
                            salir = false;
                            int longitud = campos.get(i).getLongitud();
                            if (campos.get(i).getTipo().equals("String")) {
                                String cadena = JOptionPane.showInputDialog(this, "Ingrese los datos del campo " + campos.get(i).getNombre() + "\nLongitud: " + longitud);

                                if (cadena.length() > longitud) {
                                    salir = true;
                                    JOptionPane.showMessageDialog(this, "La longitud del campo tiene que ser menor o igual a " + longitud);
                                } else {
                                    String nueva_cadena = cadena;
                                    for (int j = cadena.length(); j < longitud; j++) {
                                        nueva_cadena += " ";
                                    }
                                    buffer += nueva_cadena + ";";
                                }
                            } else if (campos.get(i).getTipo().equals("Char")) {
                                String caracter = JOptionPane.showInputDialog(this, "Ingrese los datos del campo " + campos.get(i).getNombre() + "\nLongitud: " + longitud);
                                if (caracter.length() > longitud) {
                                    salir = true;
                                    JOptionPane.showMessageDialog(this, "La longitud del campo tiene que ser menor o igual a " + longitud);
                                } else {
                                    buffer += caracter + ";";
                                }
                            } else if (campos.get(i).getTipo().equals("Int")) {
                                int numero = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese los datos del campo " + campos.get(i).getNombre() + "\nLongitud: " + longitud));
                                String num = numero + "";
                                if (num.length() > longitud) {
                                    salir = true;
                                    JOptionPane.showMessageDialog(this, "La longitud del campo tiene que ser menor o igual a " + longitud);
                                } else {
                                    String nueva_cadena = num;
                                    for (int j = num.length(); j < longitud; j++) {
                                        nueva_cadena += " ";
                                    }
                                    buffer += nueva_cadena + ";";
                                }
                            } else if (campos.get(i).getTipo().equals("Double")) {
                                double numero = Double.parseDouble(JOptionPane.showInputDialog(this, "Ingrese los datos del campo " + campos.get(i).getNombre() + "\nLongitud: " + longitud));
                                String num = numero + "";
                                if (num.length() > longitud) {
                                    salir = true;
                                    JOptionPane.showMessageDialog(this, "La longitud del campo tiene que ser menor o igual a " + longitud);
                                } else {
                                    String nueva_cadena = num;
                                    for (int j = num.length(); j < longitud; j++) {
                                        nueva_cadena += " ";
                                    }
                                    buffer += nueva_cadena + ";";
                                }
                            } else if (campos.get(i).getTipo().equals("Short")) {
                                short peque = Short.parseShort(JOptionPane.showInputDialog(this, "Ingrese los datos del campo " + campos.get(i).getNombre() + "\nLongitud: " + longitud));
                                String num = peque + "";
                                if (num.length() > longitud) {
                                    salir = true;
                                    JOptionPane.showMessageDialog(this, "La longitud del campo tiene que ser menor o igual a " + longitud);
                                } else {
                                    String nueva_cadena = num;
                                    for (int j = num.length(); j < longitud; j++) {
                                        nueva_cadena += " ";
                                    }
                                    buffer += nueva_cadena + ";";
                                }
                            } else if (campos.get(i).getTipo().equals("Long")) {
                                long largo = Long.parseLong(JOptionPane.showInputDialog(this, "Ingrese los datos del campo " + campos.get(i).getNombre() + "\nLongitud: " + longitud));
                                String num = largo + "";
                                if (num.length() > longitud) {
                                    salir = true;
                                    JOptionPane.showMessageDialog(this, "La longitud del campo tiene que ser menor o igual a " + longitud);
                                } else {
                                    String nueva_cadena = num;
                                    for (int j = num.length(); j < longitud; j++) {
                                        nueva_cadena += " ";
                                    }
                                    buffer += nueva_cadena + ";";
                                }
                            } else {//float
                                float flotante = Float.parseFloat(JOptionPane.showInputDialog(this, "Ingrese los datos del campo " + campos.get(i).getNombre() + "\nLongitud: " + longitud));
                                String num = flotante + "";
                                if (num.length() > longitud) {
                                    salir = true;
                                    JOptionPane.showMessageDialog(this, "La longitud del campo tiene que ser menor o igual a " + longitud);
                                } else {
                                    String nueva_cadena = num;
                                    for (int j = num.length(); j < longitud; j++) {
                                        nueva_cadena += " ";
                                    }
                                    buffer += nueva_cadena + ";";
                                }
                            }
                        } while (salir);
                    }
                    //escribir
                    FileWriter fw = null;
                    BufferedWriter bw = null;
                    if (false) {

                    } else {
                        try {
                            fw = new FileWriter(file, true);
                            bw = new BufferedWriter(fw);
                            bw.write(buffer);
                            bw.flush();
                            bw.close();
                            fw.close();
                        } catch (Exception e) {
                        }
                    }

                    JOptionPane.showMessageDialog(this, "¡Registro Agregado exitosamente!");
                } else {//longitud variable
                    String buffer = "";
                    for (int i = 0; i < campos.size(); i++) {
                        if (campos.get(i).getTipo().equals("String")) {
                            String cadena = JOptionPane.showInputDialog(this, "Ingrese los datos del campo " + campos.get(i).getNombre());
                            buffer += cadena + ";";
                        } else if (campos.get(i).getTipo().equals("Char")) {
                            String caracter = JOptionPane.showInputDialog(this, "Ingrese los datos del campo " + campos.get(i).getNombre());
                            buffer += caracter + ";";
                        } else if (campos.get(i).getTipo().equals("Int")) {
                            int numero = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese los datos del campo " + campos.get(i).getNombre()));
                            buffer += numero + ";";
                        } else if (campos.get(i).getTipo().equals("Double")) {
                            double numero = Double.parseDouble(JOptionPane.showInputDialog(this, "Ingrese los datos del campo " + campos.get(i).getNombre()));
                            buffer += numero + ";";
                        } else if (campos.get(i).getTipo().equals("Short")) {
                            short peque = Short.parseShort(JOptionPane.showInputDialog(this, "Ingrese los datos del campo " + campos.get(i).getNombre()));
                            buffer += peque + ";";
                        } else if (campos.get(i).getTipo().equals("Long")) {
                            long largo = Long.parseLong(JOptionPane.showInputDialog(this, "Ingrese los datos del campo " + campos.get(i).getNombre()));
                            buffer += largo + ";";
                        } else {//float
                            float flotante = Float.parseFloat(JOptionPane.showInputDialog(this, "Ingrese los datos del campo " + campos.get(i).getNombre()));
                            buffer += flotante + ";";
                        }
                    }
                    FileWriter fw = null;
                    BufferedWriter bw = null;
                    if (false) {

                    } else {
                        try {
                            fw = new FileWriter(file, true);
                            bw = new BufferedWriter(fw);
                            bw.write(buffer);
                            bw.flush();
                            bw.close();
                            fw.close();
                        } catch (Exception e) {
                        }
                    }

                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Ocurrio un error");

            }
        //}

    }//GEN-LAST:event_jmi_introducir2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        String archivo = JOptionPane.showInputDialog(this, "Ingrese el nombre del segundo archivo: ");
        File file1 = new File("./" + archivo + ".txt");
        if (file1.exists()) {
            try {
                Scanner sc = new Scanner(file1);
                sc.useDelimiter("&");
                String cadena1 = sc.next();
                String availlist1 = sc.next();//esto hay que cambiarlo
                String acum_registros = "";
                sc.useDelimiter(";");
                while (sc.hasNext()) {                    
                    acum_registros += sc.next()+";";
                }

                sc = new Scanner(file);
                sc.useDelimiter("&");
                String cadena2 = sc.next();
                sc.next();//para saltarme al availlist
                sc.useDelimiter(";");
                while (sc.hasNext()) {                    
                    acum_registros += sc.next()+";";
                }

                if (cadena2.equals(cadena1)) {
                    JOptionPane.showMessageDialog(this, "¡Los archivos se pueden cruzar!");
                    String nuevo_nombre = JOptionPane.showInputDialog(this, "Ingrese el nombre del nuevo archivo: ");
                    File file3 = new File("./" + nuevo_nombre + ".txt");
                    FileWriter fw = new FileWriter("./" + nuevo_nombre + ".txt", true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write(cadena1 + "&");
                    bw.write(availlist1);
                    bw.write(acum_registros);
                    bw.flush();
                    bw.close();
                    fw.close();
                } else {
                    JOptionPane.showMessageDialog(this, "¡Los archivos no se pueden cruzar!");
                }
                sc.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "¡El archivo no existe!");
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog Crear_Fij;
    private javax.swing.JDialog Crear_Var;
    private javax.swing.ButtonGroup dato;
    private javax.swing.ButtonGroup dato2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jb_agregar_fij;
    private javax.swing.JButton jb_agregar_var;
    private javax.swing.JButton jb_cargartabla;
    private javax.swing.JButton jb_salir_fij;
    private javax.swing.JButton jb_salir_var;
    private javax.swing.JLabel jl_archivoactual;
    private javax.swing.JMenu jm_archivo;
    private javax.swing.JMenu jm_campo;
    private javax.swing.JMenu jm_estandarizacion;
    private javax.swing.JMenu jm_indice;
    private javax.swing.JMenu jm_registro;
    private javax.swing.JMenuItem jmi_abrir;
    private javax.swing.JMenuItem jmi_borrar1;
    private javax.swing.JMenuItem jmi_crear;
    private javax.swing.JMenuItem jmi_crear1;
    private javax.swing.JMenuItem jmi_introducir2;
    private javax.swing.JMenuItem jmi_modificar1;
    private javax.swing.JPanel jp_fija;
    private javax.swing.JSpinner js_longitud;
    private javax.swing.JTable jt_Campo;
    private javax.swing.JRadioButton rb_char;
    private javax.swing.JRadioButton rb_char1;
    private javax.swing.JRadioButton rb_double;
    private javax.swing.JRadioButton rb_double1;
    private javax.swing.JRadioButton rb_float;
    private javax.swing.JRadioButton rb_float1;
    private javax.swing.JRadioButton rb_int;
    private javax.swing.JRadioButton rb_int1;
    private javax.swing.JRadioButton rb_long;
    private javax.swing.JRadioButton rb_long1;
    private javax.swing.JRadioButton rb_short;
    private javax.swing.JRadioButton rb_short1;
    private javax.swing.JRadioButton rb_string;
    private javax.swing.JRadioButton rb_string1;
    private javax.swing.JTextField tf_nombre;
    private javax.swing.JTextField tf_nombre1;
    // End of variables declaration//GEN-END:variables
}
